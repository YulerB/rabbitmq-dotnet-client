// Autogenerated code. Do not edit.

// This source code is dual-licensed under the Apache License, version
// 2.0, and the Mozilla Public License, version 1.1.
//
// The APL v2.0:
//
//---------------------------------------------------------------------------
//   Copyright (c) 2007-2016 Pivotal Software, Inc.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//---------------------------------------------------------------------------
//
// The MPL v1.1:
//
//---------------------------------------------------------------------------
//   The contents of this file are subject to the Mozilla Public License
//   Version 1.1 (the "License"); you may not use this file except in
//   compliance with the License. You may obtain a copy of the License at
//   http://www.rabbitmq.com/mpl.html
//
//   Software distributed under the License is distributed on an "AS IS"
//   basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//   License for the specific language governing rights and limitations
//   under the License.
//
//   The Original Code is RabbitMQ.
//
//   The Initial Developer of the Original Code is Pivotal Software, Inc.
//   Copyright (c) 2007-2016 Pivotal Software, Inc.  All rights reserved.
//---------------------------------------------------------------------------

using RabbitMQ.Client.Framing.Impl;
using RabbitMQ.Client.Impl;
using RabbitMQ.Util;
using System;

namespace RabbitMQ.Client.Framing
{
    /// <summary>Autogenerated type. AMQP specification content header properties for content class "basic"</summary>
    public class BasicProperties : RabbitMQ.Client.Impl.BasicProperties
    {
        private const byte BZERO = default(byte);
        private const long LZERO = 0L;
        private string m_contentType;
        private string m_contentEncoding;
        private System.Collections.Generic.Dictionary<string, object> m_headers;
        private byte m_deliveryMode;
        private byte m_priority;
        private string m_correlationId;
        private string m_replyTo;
        private string m_expiration;
        private string m_messageId;
        private AmqpTimestamp m_timestamp;
        private string m_type;
        private string m_userId;
        private string m_appId;
        private string m_clusterId;
        private PresenseFlags presenseFlags = PresenseFlags.None;

        public sealed override string ContentType
        {
            get
            {
                return m_contentType;
            }
            set
            {
                if (value == null)
                    presenseFlags = presenseFlags & ~PresenseFlags.HasContentType;
                else
                    presenseFlags = presenseFlags | PresenseFlags.HasContentType;
                m_contentType = value;
            }
        }
        public sealed override string ContentEncoding
        {
            get
            {
                return m_contentEncoding;
            }
            set
            {
                if (value == null)
                    presenseFlags = presenseFlags & ~PresenseFlags.HasContentEncoding;
                else
                    presenseFlags = presenseFlags | PresenseFlags.HasContentEncoding;
                m_contentEncoding = value;
            }
        }
        public sealed override System.Collections.Generic.Dictionary<string, object> Headers
        {
            get
            {
                return m_headers;
            }
            set
            {
                if (value == null)
                    presenseFlags = presenseFlags & ~PresenseFlags.HasHeaders;
                else
                    presenseFlags = presenseFlags | PresenseFlags.HasHeaders;
                m_headers = value;
            }
        }
        public sealed override byte DeliveryMode
        {
            get
            {
                return m_deliveryMode;
            }
            set
            {

                if (value == BZERO)
                    presenseFlags = presenseFlags & ~PresenseFlags.HasDeliveryMode;
                else
                    presenseFlags = presenseFlags | PresenseFlags.HasDeliveryMode;

                m_deliveryMode = value;
            }
        }
        public sealed override byte Priority
        {
            get
            {
                return m_priority;
            }
            set
            {
                if (value == BZERO)
                    presenseFlags = presenseFlags & ~PresenseFlags.HasPriority;
                else
                    presenseFlags = presenseFlags | PresenseFlags.HasPriority;
                m_priority = value;
            }
        }
        public sealed override string CorrelationId
        {
            get
            {
                return m_correlationId;
            }
            set
            {
                if (value == null)
                    presenseFlags = presenseFlags & ~PresenseFlags.HasCorrelationId;
                else
                    presenseFlags = presenseFlags | PresenseFlags.HasCorrelationId;
                m_correlationId = value;
            }
        }
        public sealed override string ReplyTo
        {
            get
            {
                return m_replyTo;
            }
            set
            {
                if (value == null)
                    presenseFlags = presenseFlags & ~PresenseFlags.HasReplyTo;
                else
                    presenseFlags = presenseFlags | PresenseFlags.HasReplyTo;
                m_replyTo = value;
            }
        }
        public sealed override string Expiration
        {
            get
            {
                return m_expiration;
            }
            set
            {
                if (value == null)
                    presenseFlags = presenseFlags & ~PresenseFlags.HasExpiration;
                else
                    presenseFlags = presenseFlags | PresenseFlags.HasExpiration;
                m_expiration = value;
            }
        }
        public sealed override string MessageId
        {
            get
            {
                return m_messageId;
            }
            set
            {
                if (value == null)
                    presenseFlags = presenseFlags & ~PresenseFlags.HasMessageId;
                else
                    presenseFlags = presenseFlags | PresenseFlags.HasMessageId;
                m_messageId = value;
            }
        }
        public sealed override AmqpTimestamp Timestamp
        {
            get
            {
                return m_timestamp;
            }
            set
            {
                if (value.UnixTime == LZERO)
                    presenseFlags = presenseFlags & ~PresenseFlags.HasTimestamp;
                else
                    presenseFlags = presenseFlags | PresenseFlags.HasTimestamp;
                m_timestamp = value;
            }
        }
        public sealed override string Type
        {
            get
            {
                return m_type;
            }
            set
            {
                if (value == null)
                    presenseFlags = presenseFlags & ~PresenseFlags.HasType;
                else
                    presenseFlags = presenseFlags | PresenseFlags.HasType;
                m_type = value;
            }
        }
        public sealed override string UserId
        {
            get
            {
                return m_userId;
            }
            set
            {
                if (value == null)
                    presenseFlags = presenseFlags & ~PresenseFlags.HasUserId;
                else
                    presenseFlags = presenseFlags | PresenseFlags.HasUserId;
                m_userId = value;
            }
        }
        public sealed override string AppId
        {
            get
            {
                return m_appId;
            }
            set
            {
                if (value == null)
                    presenseFlags = presenseFlags & ~PresenseFlags.HasAppId;
                else
                    presenseFlags = presenseFlags | PresenseFlags.HasAppId;
                m_appId = value;
            }
        }
        public sealed override string ClusterId
        {
            get
            {
                return m_clusterId;
            }
            set
            {
                if (value == null)
                    presenseFlags = presenseFlags & ~PresenseFlags.HasClusterId;
                else
                    presenseFlags = presenseFlags | PresenseFlags.HasClusterId;
                m_clusterId = value;
            }
        }

        public sealed override void ClearContentType() { presenseFlags = presenseFlags & ~PresenseFlags.HasContentType; }
        public sealed override void ClearContentEncoding() { presenseFlags = presenseFlags & ~PresenseFlags.HasContentEncoding; }
        public sealed override void ClearHeaders() { presenseFlags = presenseFlags & ~PresenseFlags.HasHeaders; }
        public sealed override void ClearDeliveryMode() { presenseFlags = presenseFlags & ~PresenseFlags.HasDeliveryMode; }
        public sealed override void ClearPriority() { presenseFlags = presenseFlags & ~PresenseFlags.HasPriority; }
        public sealed override void ClearCorrelationId() { presenseFlags = presenseFlags & ~PresenseFlags.HasCorrelationId; }
        public sealed override void ClearReplyTo() { presenseFlags = presenseFlags & ~PresenseFlags.HasReplyTo; }
        public sealed override void ClearExpiration() { presenseFlags = presenseFlags & ~PresenseFlags.HasExpiration; }
        public sealed override void ClearMessageId() { presenseFlags = presenseFlags & ~PresenseFlags.HasMessageId; }
        public sealed override void ClearTimestamp() { presenseFlags = presenseFlags & ~PresenseFlags.HasTimestamp; }
        public sealed override void ClearType() { presenseFlags = presenseFlags & ~PresenseFlags.HasType; }
        public sealed override void ClearUserId() { presenseFlags = presenseFlags & ~PresenseFlags.HasUserId; }
        public sealed override void ClearAppId() { presenseFlags = presenseFlags & ~PresenseFlags.HasAppId; }
        public sealed override void ClearClusterId() { presenseFlags = presenseFlags & ~PresenseFlags.HasClusterId; }

        public sealed override bool IsContentTypePresent() { return (presenseFlags & PresenseFlags.HasContentType) == PresenseFlags.HasContentType; }
        public sealed override bool IsContentEncodingPresent() { return (presenseFlags & PresenseFlags.HasContentEncoding) == PresenseFlags.HasContentEncoding; }
        public sealed override bool IsHeadersPresent() { return (presenseFlags & PresenseFlags.HasHeaders) == PresenseFlags.HasHeaders; }
        public sealed override bool IsDeliveryModePresent() { return (presenseFlags & PresenseFlags.HasDeliveryMode) == PresenseFlags.HasDeliveryMode; }
        public sealed override bool IsPriorityPresent() { return (presenseFlags & PresenseFlags.HasPriority) == PresenseFlags.HasPriority; }
        public sealed override bool IsCorrelationIdPresent() { return (presenseFlags & PresenseFlags.HasCorrelationId) == PresenseFlags.HasCorrelationId; }
        public sealed override bool IsReplyToPresent() { return (presenseFlags & PresenseFlags.HasReplyTo) == PresenseFlags.HasReplyTo; }
        public sealed override bool IsExpirationPresent() { return (presenseFlags & PresenseFlags.HasExpiration) == PresenseFlags.HasExpiration; }
        public sealed override bool IsMessageIdPresent() { return (presenseFlags & PresenseFlags.HasMessageId) == PresenseFlags.HasMessageId; }
        public sealed override bool IsTimestampPresent() { return (presenseFlags & PresenseFlags.HasTimestamp) == PresenseFlags.HasTimestamp; }
        public sealed override bool IsTypePresent() { return (presenseFlags & PresenseFlags.HasType) == PresenseFlags.HasType; }
        public sealed override bool IsUserIdPresent() { return (presenseFlags & PresenseFlags.HasUserId) == PresenseFlags.HasUserId ; }
        public sealed override bool IsAppIdPresent() { return (presenseFlags & PresenseFlags.HasAppId) == PresenseFlags.HasAppId; }
        public sealed override bool IsClusterIdPresent() { return (presenseFlags & PresenseFlags.HasClusterId) == PresenseFlags.HasClusterId; }

        public BasicProperties() { }
        public sealed override ushort ProtocolClassId { get { return 60; } }
        public sealed override string ProtocolClassName { get { return "basic"; } }

        public sealed override void ReadPropertiesFrom(ArraySegmentSequence stream)
        {
            presenseFlags = (PresenseFlags)stream.ReadUInt16();

            if ((presenseFlags & PresenseFlags.HasContentType) == PresenseFlags.HasContentType) { m_contentType = stream.ReadShortString(); }
            if ((presenseFlags & PresenseFlags.HasContentEncoding) == PresenseFlags.HasContentEncoding) { m_contentEncoding = stream.ReadShortString(); }
            if ((presenseFlags & PresenseFlags.HasHeaders) == PresenseFlags.HasHeaders) { m_headers = stream.ReadTable(); }
            if ((presenseFlags & PresenseFlags.HasDeliveryMode) == PresenseFlags.HasDeliveryMode) { m_deliveryMode = stream.ReadByte(); }
            if ((presenseFlags & PresenseFlags.HasPriority) == PresenseFlags.HasPriority) { m_priority = stream.ReadByte(); }
            if ((presenseFlags & PresenseFlags.HasCorrelationId) == PresenseFlags.HasCorrelationId) { m_correlationId = stream.ReadShortString(); }
            if ((presenseFlags & PresenseFlags.HasReplyTo) == PresenseFlags.HasReplyTo) { m_replyTo = stream.ReadShortString(); }
            if ((presenseFlags & PresenseFlags.HasExpiration) == PresenseFlags.HasExpiration) { m_expiration = stream.ReadShortString(); }
            if ((presenseFlags & PresenseFlags.HasMessageId) == PresenseFlags.HasMessageId) { m_messageId = stream.ReadShortString(); }
            if ((presenseFlags & PresenseFlags.HasTimestamp) == PresenseFlags.HasTimestamp) { m_timestamp = stream.ReadTimestamp(); }
            if ((presenseFlags & PresenseFlags.HasType) == PresenseFlags.HasType) { m_type = stream.ReadShortString(); }
            if ((presenseFlags & PresenseFlags.HasUserId) == PresenseFlags.HasUserId) { m_userId = stream.ReadShortString(); }
            if ((presenseFlags & PresenseFlags.HasAppId) == PresenseFlags.HasAppId) { m_appId = stream.ReadShortString(); }
            if ((presenseFlags & PresenseFlags.HasClusterId) == PresenseFlags.HasClusterId) { m_clusterId = stream.ReadShortString(); }
        }


        public sealed override void WritePropertiesTo(Span<byte> writer, out int written)
        {
            NetworkBinaryWriter1.WriteUInt16(writer,(UInt16) presenseFlags, out int written1);

            written = written1;

            if ((presenseFlags & PresenseFlags.HasContentType) == PresenseFlags.HasContentType) {
                NetworkBinaryWriter1.WriteShortString(writer.Slice(written1), m_contentType, out int written2);
                written += written2;
            }
            if ((presenseFlags & PresenseFlags.HasContentEncoding) == PresenseFlags.HasContentEncoding) {
                NetworkBinaryWriter1.WriteShortString(writer.Slice(written1), m_contentEncoding, out int written2);
                written += written2;
            }
            if ((presenseFlags & PresenseFlags.HasHeaders) == PresenseFlags.HasHeaders)
            {
                NetworkBinaryWriter1.WriteTable(writer.Slice(written1), m_headers, out int written2);
                written += written2;
            }
            if ((presenseFlags & PresenseFlags.HasDeliveryMode) == PresenseFlags.HasDeliveryMode)
            {
                NetworkBinaryWriter1.WriteByte(writer.Slice(written1), m_deliveryMode, out int written2);
                written += written2;
            }
            if ((presenseFlags & PresenseFlags.HasPriority) == PresenseFlags.HasPriority)
            {
                NetworkBinaryWriter1.WriteByte(writer.Slice(written1), m_priority, out int written2);
                written += written2;
            }
            if ((presenseFlags & PresenseFlags.HasCorrelationId) == PresenseFlags.HasCorrelationId)
            {
                NetworkBinaryWriter1.WriteShortString(writer.Slice(written1), m_correlationId, out int written2);
                written += written2;
            }
            if ((presenseFlags & PresenseFlags.HasReplyTo) == PresenseFlags.HasReplyTo)
            {
                NetworkBinaryWriter1.WriteShortString(writer.Slice(written1), m_replyTo, out int written2);
                written += written2;
            }
            if ((presenseFlags & PresenseFlags.HasExpiration) == PresenseFlags.HasExpiration)
            {
                NetworkBinaryWriter1.WriteShortString(writer.Slice(written1), m_expiration, out int written2);
                written += written2;
            }
            if ((presenseFlags & PresenseFlags.HasMessageId) == PresenseFlags.HasMessageId)
            {
                NetworkBinaryWriter1.WriteShortString(writer.Slice(written1), m_messageId, out int written2);
                written += written2;
            }
            if ((presenseFlags & PresenseFlags.HasTimestamp) == PresenseFlags.HasTimestamp)
            {
                NetworkBinaryWriter1.WriteTimestamp(writer.Slice(written1), m_timestamp, out int written2);
                written += written2;
            }
            if ((presenseFlags & PresenseFlags.HasType) == PresenseFlags.HasType)
            {
                NetworkBinaryWriter1.WriteShortString(writer.Slice(written1), m_type, out int written2);
                written += written2;
            }
            if ((presenseFlags & PresenseFlags.HasUserId) == PresenseFlags.HasUserId)
            {
                NetworkBinaryWriter1.WriteShortString(writer.Slice(written1), m_userId, out int written2);
                written += written2;
            }
            if ((presenseFlags & PresenseFlags.HasAppId) == PresenseFlags.HasAppId)
            {
                NetworkBinaryWriter1.WriteShortString(writer.Slice(written1), m_appId, out int written2);
                written += written2;
            }
            if ((presenseFlags & PresenseFlags.HasClusterId) == PresenseFlags.HasClusterId)
            {
                NetworkBinaryWriter1.WriteShortString(writer.Slice(written1), m_clusterId, out int written2);
                written += written2;
            }
        }

        public sealed override void AppendPropertyDebugStringTo(System.Text.StringBuilder sb)
        {
            sb.Append("(");
            //sb.Append("content-type="); sb.Append(m_contentType_present ? (m_contentType == null ? "(null)" : m_contentType.ToString()) : "_"); sb.Append(", ");
            //sb.Append("content-encoding="); sb.Append(m_contentEncoding_present ? (m_contentEncoding == null ? "(null)" : m_contentEncoding.ToString()) : "_"); sb.Append(", ");
            //sb.Append("headers="); sb.Append(m_headers_present ? (m_headers == null ? "(null)" : m_headers.ToString()) : "_"); sb.Append(", ");
            //sb.Append("delivery-mode="); sb.Append(m_deliveryMode_present ? m_deliveryMode.ToString() : "_"); sb.Append(", ");
            //sb.Append("priority="); sb.Append(m_priority_present ? m_priority.ToString() : "_"); sb.Append(", ");
            //sb.Append("correlation-id="); sb.Append(m_correlationId_present ? (m_correlationId == null ? "(null)" : m_correlationId.ToString()) : "_"); sb.Append(", ");
            //sb.Append("reply-to="); sb.Append(m_replyTo_present ? (m_replyTo == null ? "(null)" : m_replyTo.ToString()) : "_"); sb.Append(", ");
            //sb.Append("expiration="); sb.Append(m_expiration_present ? (m_expiration == null ? "(null)" : m_expiration.ToString()) : "_"); sb.Append(", ");
            //sb.Append("message-id="); sb.Append(m_messageId_present ? (m_messageId == null ? "(null)" : m_messageId.ToString()) : "_"); sb.Append(", ");
            //sb.Append("timestamp="); sb.Append(m_timestamp_present ? m_timestamp.ToString() : "_"); sb.Append(", ");
            //sb.Append("type="); sb.Append(m_type_present ? (m_type == null ? "(null)" : m_type.ToString()) : "_"); sb.Append(", ");
            //sb.Append("user-id="); sb.Append(m_userId_present ? (m_userId == null ? "(null)" : m_userId.ToString()) : "_"); sb.Append(", ");
            //sb.Append("app-id="); sb.Append(m_appId_present ? (m_appId == null ? "(null)" : m_appId.ToString()) : "_"); sb.Append(", ");
            //sb.Append("cluster-id="); sb.Append(m_clusterId_present ? (m_clusterId == null ? "(null)" : m_clusterId.ToString()) : "_");
            sb.Append(")");
        }

        internal sealed override int EstimatePropertiesSize()
        {
            var total = 2;

            if ((presenseFlags & PresenseFlags.HasContentType) == PresenseFlags.HasContentType)
            {
                total += 1 + System.Text.Encoding.UTF8.GetByteCount(m_contentType);
            }
            if ((presenseFlags & PresenseFlags.HasContentEncoding) == PresenseFlags.HasContentEncoding)
            {
                total += 1 + System.Text.Encoding.UTF8.GetByteCount(m_contentEncoding );
            }
            if ((presenseFlags & PresenseFlags.HasHeaders) == PresenseFlags.HasHeaders)
            {
                total += NetworkBinaryWriter1.EstimateTableSize(m_headers);
            }
            if ((presenseFlags & PresenseFlags.HasDeliveryMode) == PresenseFlags.HasDeliveryMode)
            {
                total += 1;
            }
            if ((presenseFlags & PresenseFlags.HasPriority) == PresenseFlags.HasPriority)
            {
                total += 1;
            }
            if ((presenseFlags & PresenseFlags.HasCorrelationId) == PresenseFlags.HasCorrelationId)
            {
                total += 1 + System.Text.Encoding.UTF8.GetByteCount(m_correlationId );
            }
            if ((presenseFlags & PresenseFlags.HasReplyTo) == PresenseFlags.HasReplyTo)
            {
                total += 1 + System.Text.Encoding.UTF8.GetByteCount(m_replyTo );
            }
            if ((presenseFlags & PresenseFlags.HasExpiration) == PresenseFlags.HasExpiration)
            {
                total += 1 + System.Text.Encoding.UTF8.GetByteCount(m_expiration );
            }
            if ((presenseFlags & PresenseFlags.HasMessageId) == PresenseFlags.HasMessageId)
            {
                total += 1 + System.Text.Encoding.UTF8.GetByteCount(m_messageId );
            }
            if ((presenseFlags & PresenseFlags.HasTimestamp) == PresenseFlags.HasTimestamp)
            {
                total += 8;
            }
            if ((presenseFlags & PresenseFlags.HasType) == PresenseFlags.HasType)
            {
                total += 1 + System.Text.Encoding.UTF8.GetByteCount(m_type );
            }
            if ((presenseFlags & PresenseFlags.HasUserId) == PresenseFlags.HasUserId)
            {
                total += 1 + System.Text.Encoding.UTF8.GetByteCount(m_userId );
            }
            if ((presenseFlags & PresenseFlags.HasAppId) == PresenseFlags.HasAppId)
            {
                total += 1 + System.Text.Encoding.UTF8.GetByteCount(m_appId );
            }
            if ((presenseFlags & PresenseFlags.HasClusterId) == PresenseFlags.HasClusterId)
            {
                total += 1 + System.Text.Encoding.UTF8.GetByteCount(m_clusterId );
            }

            return total;
        }
    }
}
