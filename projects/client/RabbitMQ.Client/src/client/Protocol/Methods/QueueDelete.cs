// Autogenerated code. Do not edit.

// This source code is dual-licensed under the Apache License, version
// 2.0, and the Mozilla Public License, version 1.1.
//
// The APL v2.0:
//
//---------------------------------------------------------------------------
//   Copyright (c) 2007-2016 Pivotal Software, Inc.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//---------------------------------------------------------------------------
//
// The MPL v1.1:
//
//---------------------------------------------------------------------------
//   The contents of this file are subject to the Mozilla Public License
//   Version 1.1 (the "License"); you may not use this file except in
//   compliance with the License. You may obtain a copy of the License at
//   http://www.rabbitmq.com/mpl.html
//
//   Software distributed under the License is distributed on an "AS IS"
//   basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//   License for the specific language governing rights and limitations
//   under the License.
//
//   The Original Code is RabbitMQ.
//
//   The Initial Developer of the Original Code is Pivotal Software, Inc.
//   Copyright (c) 2007-2016 Pivotal Software, Inc.  All rights reserved.
//---------------------------------------------------------------------------

using RabbitMQ.Client.Impl;
using RabbitMQ.Util;
namespace RabbitMQ.Client.Framing.Impl
{
    using RabbitMQ.Client.Framing;

    /// <summary>Autogenerated type. Private implementation class - do not use directly.</summary>
    public class QueueDelete : IMethod, IQueueDelete
    {
        public const ushort ClassId = 50;
        public const ushort MethodId = 40;

        private ushort m_reserved1;
        private string m_queue;
        private bool m_ifUnused;
        private bool m_ifEmpty;
        private bool m_nowait;

        public ushort Reserved1 { get { return m_reserved1; } }
        public string Queue { get { return m_queue; } }
        public bool IfUnused { get { return m_ifUnused; } }
        public bool IfEmpty { get { return m_ifEmpty; } }
        public bool Nowait { get { return m_nowait; } }

        public QueueDelete() { }
        public QueueDelete(
          ushort initReserved1,
          string initQueue,
          bool initIfUnused,
          bool initIfEmpty,
          bool initNowait)
        {
            m_reserved1 = initReserved1;
            m_queue = initQueue;
            m_ifUnused = initIfUnused;
            m_ifEmpty = initIfEmpty;
            m_nowait = initNowait;
        }

        public ushort ProtocolClassId { get { return 50; } }
        public ushort ProtocolMethodId { get { return 40; } }
        public string ProtocolMethodName { get { return "queue.delete"; } }
        public bool HasContent { get { return false; } }

        public void ReadArgumentsFrom(ArraySegmentSequence reader)
        {
            m_reserved1 = reader.ReadUInt16();
            m_queue = reader.ReadShortString();

            QueueDeleteFlags flags = (QueueDeleteFlags)reader.ReadByte();

            m_ifUnused = (flags & QueueDeleteFlags.IfUnused) == QueueDeleteFlags.IfUnused;// reader.ReadBit();
            m_ifEmpty = (flags & QueueDeleteFlags.IfEmpty) == QueueDeleteFlags.IfEmpty;//reader.ReadBit();
            m_nowait = (flags & QueueDeleteFlags.NoWait) == QueueDeleteFlags.NoWait;//reader.ReadBit();
        }

        public void WriteArgumentsTo(FrameBuilder writer)
        {
            writer.WriteUInt16(m_reserved1);
            writer.WriteShortString(m_queue);

            QueueDeleteFlags flags = QueueDeleteFlags.None;
            if (m_ifUnused) flags |= QueueDeleteFlags.IfUnused;
            if (m_ifEmpty) flags |= QueueDeleteFlags.IfEmpty;
            if (m_nowait) flags |= QueueDeleteFlags.NoWait;

            writer.WriteByte((byte)flags);

            //writer.WriteBit(m_ifUnused);
            //writer.WriteBit(m_ifEmpty);
            //writer.WriteBit(m_nowait);
        }

        public void AppendArgumentDebugStringTo(System.Text.StringBuilder sb)
        {
            sb.Append("(");
            sb.Append(m_reserved1); sb.Append(",");
            sb.Append(m_queue); sb.Append(",");
            sb.Append(m_ifUnused); sb.Append(",");
            sb.Append(m_ifEmpty); sb.Append(",");
            sb.Append(m_nowait);
            sb.Append(")");
        }
    }
}