// Autogenerated code. Do not edit.

// This source code is dual-licensed under the Apache License, version
// 2.0, and the Mozilla Public License, version 1.1.
//
// The APL v2.0:
//
//---------------------------------------------------------------------------
//   Copyright (c) 2007-2016 Pivotal Software, Inc.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//---------------------------------------------------------------------------
//
// The MPL v1.1:
//
//---------------------------------------------------------------------------
//   The contents of this file are subject to the Mozilla Public License
//   Version 1.1 (the "License"); you may not use this file except in
//   compliance with the License. You may obtain a copy of the License at
//   http://www.rabbitmq.com/mpl.html
//
//   Software distributed under the License is distributed on an "AS IS"
//   basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//   License for the specific language governing rights and limitations
//   under the License.
//
//   The Original Code is RabbitMQ.
//
//   The Initial Developer of the Original Code is Pivotal Software, Inc.
//   Copyright (c) 2007-2016 Pivotal Software, Inc.  All rights reserved.
//---------------------------------------------------------------------------

using RabbitMQ.Client.Impl;
using RabbitMQ.Util;
namespace RabbitMQ.Client.Framing.Impl
{
    using RabbitMQ.Client.Framing;

    /// <summary>Autogenerated type. Private implementation class - do not use directly.</summary>
    public class ExchangeDeclare : RabbitMQ.Client.Impl.MethodBase, IExchangeDeclare
    {
        public const ushort ClassId = 40;
        public const ushort MethodId = 10;

        public ushort m_reserved1;
        public string m_exchange;
        public string m_type;
        public bool m_passive;
        public bool m_durable;
        public bool m_autoDelete;
        public bool m_internal;
        public bool m_nowait;
        public System.Collections.Generic.IDictionary<string, object> m_arguments;

        ushort IExchangeDeclare.Reserved1 { get { return m_reserved1; } }
        string IExchangeDeclare.Exchange { get { return m_exchange; } }
        string IExchangeDeclare.Type { get { return m_type; } }
        bool IExchangeDeclare.Passive { get { return m_passive; } }
        bool IExchangeDeclare.Durable { get { return m_durable; } }
        bool IExchangeDeclare.AutoDelete { get { return m_autoDelete; } }
        bool IExchangeDeclare.Internal { get { return m_internal; } }
        bool IExchangeDeclare.Nowait { get { return m_nowait; } }
        System.Collections.Generic.IDictionary<string, object> IExchangeDeclare.Arguments { get { return m_arguments; } }

        public ExchangeDeclare() { }
        public ExchangeDeclare(
          ushort initReserved1,
          string initExchange,
          string initType,
          bool initPassive,
          bool initDurable,
          bool initAutoDelete,
          bool initInternal,
          bool initNowait,
          System.Collections.Generic.IDictionary<string, object> initArguments)
        {
            m_reserved1 = initReserved1;
            m_exchange = initExchange;
            m_type = initType;
            m_passive = initPassive;
            m_durable = initDurable;
            m_autoDelete = initAutoDelete;
            m_internal = initInternal;
            m_nowait = initNowait;
            m_arguments = initArguments;
        }

        public override ushort ProtocolClassId { get { return 40; } }
        public override ushort ProtocolMethodId { get { return 10; } }
        public override string ProtocolMethodName { get { return "exchange.declare"; } }
        public override bool HasContent { get { return false; } }

        public override void ReadArgumentsFrom(ArraySegmentSequence reader)
        {
            m_reserved1 = reader.ReadUInt16();
            m_exchange = reader.ReadShortString();
            m_type = reader.ReadShortString();

            ExchangeDeclareFlags flag =(ExchangeDeclareFlags) reader.ReadByte();
            m_arguments = reader.ReadTable();

            m_passive = (flag & ExchangeDeclareFlags.Passive) == ExchangeDeclareFlags.Passive;// reader.ReadBit();
            m_durable = (flag & ExchangeDeclareFlags.Durable) == ExchangeDeclareFlags.Durable;//reader.ReadBit();
            m_autoDelete = (flag & ExchangeDeclareFlags.AutoDelete) == ExchangeDeclareFlags.AutoDelete;// reader.ReadBit();
            m_internal = (flag & ExchangeDeclareFlags.Internal) == ExchangeDeclareFlags.Internal;// reader.ReadBit();
            m_nowait = (flag & ExchangeDeclareFlags.NoWait) == ExchangeDeclareFlags.NoWait;// reader.ReadBit();
        }

        public override void WriteArgumentsTo(FrameBuilder writer)
        {
            writer.WriteUInt16(m_reserved1);
            writer.WriteShortString(m_exchange);
            writer.WriteShortString(m_type);

            ExchangeDeclareFlags flags = ExchangeDeclareFlags.None;
            if (m_passive) flags |= ExchangeDeclareFlags.Passive;
            if (m_durable) flags |= ExchangeDeclareFlags.Durable;
            if (m_autoDelete) flags |= ExchangeDeclareFlags.AutoDelete;
            if (m_internal) flags |= ExchangeDeclareFlags.Internal;
            if (m_nowait) flags |= ExchangeDeclareFlags.NoWait;

            writer.WriteByte((byte)flags);
            writer.WriteTable(m_arguments);
        }



        public override void AppendArgumentDebugStringTo(System.Text.StringBuilder sb)
        {
            sb.Append("(");
            sb.Append(m_reserved1); sb.Append(",");
            sb.Append(m_exchange); sb.Append(",");
            sb.Append(m_type); sb.Append(",");
            sb.Append(m_passive); sb.Append(",");
            sb.Append(m_durable); sb.Append(",");
            sb.Append(m_autoDelete); sb.Append(",");
            sb.Append(m_internal); sb.Append(",");
            sb.Append(m_nowait); sb.Append(",");
            sb.Append(m_arguments);
            sb.Append(")");
        }
    }
}