// Autogenerated code. Do not edit.

// This source code is dual-licensed under the Apache License, version
// 2.0, and the Mozilla Public License, version 1.1.
//
// The APL v2.0:
//
//---------------------------------------------------------------------------
//   Copyright (c) 2007-2016 Pivotal Software, Inc.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//---------------------------------------------------------------------------
//
// The MPL v1.1:
//
//---------------------------------------------------------------------------
//   The contents of this file are subject to the Mozilla Public License
//   Version 1.1 (the "License"); you may not use this file except in
//   compliance with the License. You may obtain a copy of the License at
//   http://www.rabbitmq.com/mpl.html
//
//   Software distributed under the License is distributed on an "AS IS"
//   basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//   License for the specific language governing rights and limitations
//   under the License.
//
//   The Original Code is RabbitMQ.
//
//   The Initial Developer of the Original Code is Pivotal Software, Inc.
//   Copyright (c) 2007-2016 Pivotal Software, Inc.  All rights reserved.
//---------------------------------------------------------------------------

using RabbitMQ.Client.Impl;
using RabbitMQ.Util;
namespace RabbitMQ.Client.Framing.Impl
{
    using RabbitMQ.Client.Framing;

    /// <summary>Autogenerated type. Private implementation class - do not use directly.</summary>
    public class BasicConsume : RabbitMQ.Client.Impl.MethodBase, IBasicConsume
    {
        public const ushort ClassId = 60;
        public const ushort MethodId = 20;

        public ushort m_reserved1;
        public string m_queue;
        public string m_consumerTag;
        //public bool m_noLocal;
        //public bool m_noAck;
        //public bool m_exclusive;
        //public bool m_nowait;
        private BasicConsumeFlags m_settings;
        public System.Collections.Generic.IDictionary<string, object> m_arguments;

        ushort IBasicConsume.Reserved1 { get { return m_reserved1; } }
        string IBasicConsume.Queue { get { return m_queue; } }
        string IBasicConsume.ConsumerTag { get { return m_consumerTag; } }

        BasicConsumeFlags IBasicConsume.Settings { get { return m_settings; } }
        //bool IBasicConsume.NoLocal { get { return m_noLocal; } }
        //bool IBasicConsume.NoAck { get { return m_noAck; } }
        //bool IBasicConsume.Exclusive { get { return m_exclusive; } }
        //bool IBasicConsume.Nowait { get { return m_nowait; } }
        System.Collections.Generic.IDictionary<string, object> IBasicConsume.Arguments { get { return m_arguments; } }

        public BasicConsume() { }
        public BasicConsume(
          ushort initReserved1,
          string initQueue,
          string initConsumerTag,
          BasicConsumeFlags settings,
          System.Collections.Generic.IDictionary<string, object> initArguments)
        {
            m_reserved1 = initReserved1;
            m_queue = initQueue;
            m_consumerTag = initConsumerTag;
            m_settings = settings;
            m_arguments = initArguments;
        }

        public override ushort ProtocolClassId { get { return 60; } }
        public override ushort ProtocolMethodId { get { return 20; } }
        public override string ProtocolMethodName { get { return "basic.consume"; } }
        public override bool HasContent { get { return false; } }

        public override void ReadArgumentsFrom(ArraySegmentSequence reader)
        {
            m_reserved1 = reader.ReadUInt16();
            m_queue = reader.ReadShortString();
            m_consumerTag = reader.ReadShortString();
            m_settings = (BasicConsumeFlags)reader.ReadByte();
            m_arguments = reader.ReadTable();
        }

        public override void WriteArgumentsTo(FrameBuilder writer)
        {
            writer.WriteUInt16(m_reserved1);
            writer.WriteShortString(m_queue);
            writer.WriteShortString(m_consumerTag);
            writer.WriteByte((byte)m_settings);
            writer.WriteTable(m_arguments);
        }

        public override void AppendArgumentDebugStringTo(System.Text.StringBuilder sb)
        {
            sb.Append("(");
            sb.Append(m_reserved1); sb.Append(",");
            sb.Append(m_queue); sb.Append(",");
            sb.Append(m_consumerTag); sb.Append(",");
            sb.Append(m_settings); sb.Append(",");
            sb.Append(m_arguments);
            sb.Append(")");
        }
    }
}